buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.openapi.generator" version '6.5.0'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.17.1'
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.trip.auth-service'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	// logback conflict
	configureEach {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.4")
}

// restdocs-api-spec: OpenAPI 스펙 생성 설정 명시 start
swaggerSources {
	sample {
		setInputFile(file("src/api-spec/openapi3.yaml"))
	}
}

openapi3 {
	servers = [{ url = "http://localhost:8001" }]
	title = "API 문서"
	description = "API Docs"
	version = "0.0.1"
	format = "json"
}


task docs {
	dependsOn 'openapi3'
	doLast {
		copy {
			from "src/api-spec/openapi3.json"
			into "src/resources/main/static/docs"
		}
	}
}

// restdocs-api-spec: OpenAPI 스펙 생성 설정 명시 end

dependencies {
	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.5.1'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// rest docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'

	// open api
	implementation 'org.openapitools:openapi-generator:6.5.0'
	implementation "org.openapitools:openapi-generator-gradle-plugin:6.5.0"

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	//querydsl 설정 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// test
	runtimeOnly 'com.h2database:h2'
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.testcontainers:mysql:1.17.6'
	testImplementation 'org.testcontainers:testcontainers:1.17.6'
	testImplementation 'org.testcontainers:junit-jupiter:1.16.2'
	testImplementation 'org.assertj:assertj-core:3.24.1'
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}
